{"version":3,"sources":["../../src/apps/index.js"],"names":["ensureContext","apps","appAddress","context","app","get","Map","set","appContext","BehaviorSubject","AppContextPool","hasApp","has","pipe","toPromise","observe","value","next"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA,SAASA,aAAT,CAAwBC,IAAxB,EAA8BC,UAA9B,EAA0CC,OAA1C,EAAmD;AACjD,MAAIC,GAAG,GAAGH,IAAI,CAACI,GAAL,CAASH,UAAT,CAAV;;AACA,MAAI,CAACE,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAG,IAAIE,GAAJ,EAAN;AACAL,IAAAA,IAAI,CAACM,GAAL,CAASL,UAAT,EAAqBE,GAArB;AACD;;AAED,MAAII,UAAU,GAAGJ,GAAG,CAACC,GAAJ,CAAQF,OAAR,CAAjB;;AACA,MAAI,CAACK,UAAL,EAAiB;AACfA,IAAAA,UAAU,GAAG,IAAIC,qBAAJ,CAAoB,IAApB,CAAb;AACAL,IAAAA,GAAG,CAACG,GAAJ,CAAQJ,OAAR,EAAiBK,UAAjB;AACD;;AAED,SAAOA,UAAP;AACD;;AAEc,MAAME,cAAN,CAAqB;AAAA;AAAA;AAAA;AAAA,aAC1B,IAAIJ,GAAJ;AAD0B;AAAA;;AAGlCK,EAAAA,MAAM,CAAET,UAAF,EAAc;AAClB,WAAO,iDAAWU,GAAX,CAAeV,UAAf,CAAP;AACD;;AAED,QAAMG,GAAN,CAAWH,UAAX,EAAuBC,OAAvB,EAAgC;AAC9B,UAAMC,GAAG,GAAG,iDAAWC,GAAX,CAAeH,UAAf,CAAZ;;AACA,QAAI,CAACE,GAAD,IAAQ,CAACA,GAAG,CAACQ,GAAJ,CAAQT,OAAR,CAAb,EAA+B;AAC7B,aAAO,IAAP;AACD;;AACD,WAAOC,GAAG,CAACC,GAAJ,CAAQF,OAAR,EAAiBU,IAAjB,CAAsB,uBAAtB,EAA+BC,SAA/B,EAAP;AACD;;AAEDC,EAAAA,OAAO,CAAEb,UAAF,EAAcC,OAAd,EAAuB;AAC5B,UAAMK,UAAU,GAAGR,aAAa,qCAAC,IAAD,UAAaE,UAAb,EAAyBC,OAAzB,CAAhC;AACA,WAAOK,UAAP;AACD;;AAEDD,EAAAA,GAAG,CAAEL,UAAF,EAAcC,OAAd,EAAuBa,KAAvB,EAA8B;AAC/B,UAAMR,UAAU,GAAGR,aAAa,qCAAC,IAAD,UAAaE,UAAb,EAAyBC,OAAzB,CAAhC;AACAK,IAAAA,UAAU,CAACS,IAAX,CAAgBD,KAAhB;AACD;;AAvBiC","sourcesContent":["import { BehaviorSubject } from 'rxjs'\nimport { first } from 'rxjs/operators'\n\nfunction ensureContext (apps, appAddress, context) {\n  let app = apps.get(appAddress)\n  if (!app) {\n    app = new Map()\n    apps.set(appAddress, app)\n  }\n\n  let appContext = app.get(context)\n  if (!appContext) {\n    appContext = new BehaviorSubject(null)\n    app.set(context, appContext)\n  }\n\n  return appContext\n}\n\nexport default class AppContextPool {\n  #apps = new Map()\n\n  hasApp (appAddress) {\n    return this.#apps.has(appAddress)\n  }\n\n  async get (appAddress, context) {\n    const app = this.#apps.get(appAddress)\n    if (!app || !app.has(context)) {\n      return null\n    }\n    return app.get(context).pipe(first()).toPromise()\n  }\n\n  observe (appAddress, context) {\n    const appContext = ensureContext(this.#apps, appAddress, context)\n    return appContext\n  }\n\n  set (appAddress, context, value) {\n    const appContext = ensureContext(this.#apps, appAddress, context)\n    appContext.next(value)\n  }\n}\n"],"file":"index.js"}