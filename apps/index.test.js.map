{"version":3,"sources":["../../src/apps/index.test.js"],"names":["t","appAddress","pool","AppContextPool","false","hasApp","set","true","is","get","contextKey","observedContext","observe","counter","subscribe","val","fail"],"mappings":";;;;AAAA;;AACA;;AAEA,kBAAK,6BAAL,EAAoC,MAAOA,CAAP,IAAa;AAC/C;AACA,QAAMC,UAAU,GAAG,MAAnB,CAF+C,CAG/C;;AACA,QAAMC,IAAI,GAAG,IAAIC,cAAJ,EAAb,CAJ+C,CAK/C;;AACAH,EAAAA,CAAC,CAACI,KAAF,CAAQF,IAAI,CAACG,MAAL,CAAYJ,UAAZ,CAAR;AACD,CAPD;AASA,kBAAK,4CAAL,EAAmD,MAAOD,CAAP,IAAa;AAC9D;AACA,QAAMC,UAAU,GAAG,MAAnB,CAF8D,CAG9D;;AACA,QAAMC,IAAI,GAAG,IAAIC,cAAJ,EAAb;AACAD,EAAAA,IAAI,CAACI,GAAL,CAASL,UAAT,EAAqB,MAArB,EAA6B,OAA7B,EAL8D,CAM9D;;AACAD,EAAAA,CAAC,CAACO,IAAF,CAAOL,IAAI,CAACG,MAAL,CAAYJ,UAAZ,CAAP;AACD,CARD;AAUA,kBAAK,yDAAL,EAAgE,MAAOD,CAAP,IAAa;AAC3E;AACA,QAAMC,UAAU,GAAG,MAAnB,CAF2E,CAG3E;;AACA,QAAMC,IAAI,GAAG,IAAIC,cAAJ,EAAb;AACAD,EAAAA,IAAI,CAACI,GAAL,CAASL,UAAT,EAAqB,OAArB,EAA8B,aAA9B;AACAC,EAAAA,IAAI,CAACI,GAAL,CAASL,UAAT,EAAqB,QAArB,EAA+B,aAA/B;AACAC,EAAAA,IAAI,CAACI,GAAL,CAASL,UAAT,EAAqB,QAArB,EAA+B,cAA/B,EAP2E,CAQ3E;;AACAD,EAAAA,CAAC,CAACQ,EAAF,EAAK,MAAMN,IAAI,CAACO,GAAL,CAASR,UAAT,EAAqB,OAArB,CAAX,GAA0C,aAA1C;AACAD,EAAAA,CAAC,CAACQ,EAAF,EAAK,MAAMN,IAAI,CAACO,GAAL,CAASR,UAAT,EAAqB,QAArB,CAAX,GAA2C,cAA3C;AACD,CAXD;AAaA,kBAAK,oDAAL,EAA2D,MAAOD,CAAP,IAAa;AACtE;AACA,QAAMC,UAAU,GAAG,MAAnB;AACA,QAAMS,UAAU,GAAG,KAAnB,CAHsE,CAItE;;AACA,QAAMR,IAAI,GAAG,IAAIC,cAAJ,EAAb;AACA,QAAMQ,eAAe,GAAGT,IAAI,CAACU,OAAL,CAAaX,UAAb,EAAyBS,UAAzB,CAAxB;AACAR,EAAAA,IAAI,CAACI,GAAL,CAASL,UAAT,EAAqBS,UAArB,EAAiC,aAAjC,EAPsE,CAOtB;AAChD;;AACA,MAAIG,OAAO,GAAG,CAAd;AACAF,EAAAA,eAAe,CAACG,SAAhB,CAA0BC,GAAG,IAAI;AAC/B,QAAIF,OAAO,KAAK,CAAhB,EAAmB;AACjBb,MAAAA,CAAC,CAACQ,EAAF,CAAKO,GAAL,EAAU,aAAV;AACD,KAFD,MAEO,IAAIF,OAAO,KAAK,CAAhB,EAAmB;AACxBb,MAAAA,CAAC,CAACQ,EAAF,CAAKO,GAAL,EAAU,cAAV;AACD,KAFM,MAEA,IAAIF,OAAO,KAAK,CAAhB,EAAmB;AACxBb,MAAAA,CAAC,CAACQ,EAAF,CAAKO,GAAL,EAAU,aAAV;AACD,KAFM,MAEA;AACLf,MAAAA,CAAC,CAACgB,IAAF,CAAO,oBAAP;AACD;;AACDH,IAAAA,OAAO;AACR,GAXD,EAVsE,CAuBtE;;AACAX,EAAAA,IAAI,CAACI,GAAL,CAASL,UAAT,EAAqBS,UAArB,EAAiC,cAAjC;AACAR,EAAAA,IAAI,CAACI,GAAL,CAASL,UAAT,EAAqBS,UAArB,EAAiC,aAAjC;AACD,CA1BD","sourcesContent":["import test from 'ava'\nimport AppContextPool from './index'\n\ntest('AppContextPool starts empty', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  // act\n  const pool = new AppContextPool()\n  // assert\n  t.false(pool.hasApp(appAddress))\n})\n\ntest('AppContextPool can create new app contexts', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  // act\n  const pool = new AppContextPool()\n  pool.set(appAddress, 'path', '/vote')\n  // assert\n  t.true(pool.hasApp(appAddress))\n})\n\ntest('AppContextPool can read and write values to app context', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  // act\n  const pool = new AppContextPool()\n  pool.set(appAddress, 'first', 'first value')\n  pool.set(appAddress, 'second', 'first value')\n  pool.set(appAddress, 'second', 'second value')\n  // assert\n  t.is(await pool.get(appAddress, 'first'), 'first value')\n  t.is(await pool.get(appAddress, 'second'), 'second value')\n})\n\ntest('AppContextPool can observe values from app context', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const contextKey = 'key'\n  // act\n  const pool = new AppContextPool()\n  const observedContext = pool.observe(appAddress, contextKey)\n  pool.set(appAddress, contextKey, 'first value') // starting value\n  // assert\n  let counter = 0\n  observedContext.subscribe(val => {\n    if (counter === 0) {\n      t.is(val, 'first value')\n    } else if (counter === 1) {\n      t.is(val, 'second value')\n    } else if (counter === 2) {\n      t.is(val, 'third value')\n    } else {\n      t.fail('too many emissions')\n    }\n    counter++\n  })\n\n  // Emit after subscribed\n  pool.set(appAddress, contextKey, 'second value')\n  pool.set(appAddress, contextKey, 'third value')\n})\n"],"file":"index.test.js"}