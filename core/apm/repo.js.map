{"version":3,"sources":["../../../src/core/apm/repo.js"],"names":["makeRepoProxy","address","web3","options","getAllRepoVersions","repoProxy","versions","versionCount","call","versionId","push","getRepoVersionById","Promise","all","getRepoLatestVersion","contentURI","contractAddress","semanticVersion","version","join","getRepoLatestVersionForContract","appContractAddress","toString","fetchRepoContentURI","fileFetcher","fetchTimeout","provider","location","split","Error","supportsProvider","files","filesFetch","fetch","Number","isFinite","map","JSON","parse","err","SyntaxError","console","warn","content","manifest","artifact"],"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEO,SAASA,aAAT,CAAwBC,OAAxB,EAAiCC,IAAjC,EAAuCC,OAAvC,EAAgD;AACrD,SAAO,6BAAiBF,OAAjB,EAA0B,wBAAO,UAAP,CAA1B,EAA8CC,IAA9C,EAAoDC,OAApD,CAAP;AACD;;AAEM,eAAeC,kBAAf,CAAmCC,SAAnC,EAA8C;AACnD,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,YAAY,GAAG,MAAMF,SAAS,CAACG,IAAV,CAAe,kBAAf,CAA3B,CAFmD,CAInD;;AACA,OAAK,IAAIC,SAAS,GAAG,CAArB,EAAwBA,SAAS,IAAIF,YAArC,EAAmD,EAAEE,SAArD,EAAgE;AAC9DH,IAAAA,QAAQ,CAACI,IAAT,EAAc,MAAMC,kBAAkB,CAACN,SAAD,EAAYI,SAAZ,CAAtC;AACD;;AAED,SAAOG,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAP;AACD;;AAEM,eAAeQ,oBAAf,CAAqCT,SAArC,EAAgD;AACrD,QAAM;AAAEU,IAAAA,UAAF;AAAcC,IAAAA,eAAd;AAA+BC,IAAAA;AAA/B,MAAmD,MAAMZ,SAAS,CAACG,IAAV,CAAe,WAAf,CAA/D;AACA,SAAO;AACLQ,IAAAA,eADK;AAELD,IAAAA,UAAU,EAAE,2BAAWA,UAAX,CAFP;AAGLG,IAAAA,OAAO,EAAED,eAAe,CAACE,IAAhB,CAAqB,GAArB;AAHJ,GAAP;AAKD;;AAEM,eAAeC,+BAAf,CAAgDf,SAAhD,EAA2DgB,kBAA3D,EAA+E;AACpF,QAAM;AACJN,IAAAA,UADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA;AAHI,MAIF,MAAMZ,SAAS,CAACG,IAAV,CAAe,6BAAf,EAA8Ca,kBAA9C,CAJV;AAMA,SAAO;AACLL,IAAAA,eADK;AAELD,IAAAA,UAAU,EAAE,2BAAWA,UAAX,CAFP;AAGLG,IAAAA,OAAO,EAAED,eAAe,CAACE,IAAhB,CAAqB,GAArB;AAHJ,GAAP;AAKD;;AAEM,eAAeR,kBAAf,CAAmCN,SAAnC,EAA8CI,SAA9C,EAAyD;AAC9D,QAAM;AAAEM,IAAAA,UAAF;AAAcC,IAAAA,eAAd;AAA+BC,IAAAA;AAA/B,MAAmD,MAAMZ,SAAS,CAACG,IAAV,CAAe,gBAAf,EAAiCC,SAAjC,CAA/D;AACA,SAAO;AACLO,IAAAA,eADK;AAELD,IAAAA,UAAU,EAAE,2BAAWA,UAAX,CAFP;AAGLG,IAAAA,OAAO,EAAED,eAAe,CAACE,IAAhB,CAAqB,GAArB,CAHJ;AAIL;AACAV,IAAAA,SAAS,EAAEA,SAAS,CAACa,QAAV;AALN,GAAP;AAOD;;AAEM,eAAeC,mBAAf,CAAoCC,WAApC,EAAiDT,UAAjD,EAA6D;AAAEU,EAAAA;AAAF,IAAmB,EAAhF,EAAoF;AACzF,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBZ,UAAU,CAACa,KAAX,CAAiB,OAAjB,CAA7B;;AAEA,MAAI,CAACF,QAAD,IAAa,CAACC,QAAlB,EAA4B;AAC1B,UAAM,IAAIE,KAAJ,+BAAiCd,UAAjC,EAAN;AACD,GAFD,MAEO,IAAI,CAACS,WAAW,CAACM,gBAAZ,CAA6BJ,QAA7B,CAAL,EAA6C;AAClD,UAAM,IAAIG,KAAJ,mCAAqCH,QAArC,EAAN;AACD;;AAED,MAAIK,KAAJ;;AACA,MAAI;AACF,QAAIC,UAAU,GAAGpB,OAAO,CAACC,GAAR,CAAY,CAC3BW,WAAW,CAACS,KAAZ,CAAkBP,QAAlB,EAA4BC,QAA5B,EAAsC,eAAtC,CAD2B,EAE3BH,WAAW,CAACS,KAAZ,CAAkBP,QAAlB,EAA4BC,QAA5B,EAAsC,eAAtC,CAF2B,CAAZ,CAAjB;;AAIA,QAAIO,MAAM,CAACC,QAAP,CAAgBV,YAAhB,KAAiCA,YAAY,GAAG,CAApD,EAAuD;AACrDO,MAAAA,UAAU,GAAG,6BAAeA,UAAf,EAA2BP,YAA3B,CAAb;AACD;;AACDM,IAAAA,KAAK,GAAG,CAAC,MAAMC,UAAP,EAAmBI,GAAnB,CAAuBC,IAAI,CAACC,KAA5B,CAAR;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACZ,QAAIA,GAAG,YAAYC,WAAnB,EAAgC;AAC9B;AACAC,MAAAA,OAAO,CAACC,IAAR,yBAA8B3B,UAA9B,6BAAkEwB,GAAlE;AACD,KAJW,CAMZ;;;AACA,WAAO;AACLI,MAAAA,OAAO,EAAE;AAAEjB,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AADJ,KAAP;AAGD;;AAED,QAAM,CAACiB,QAAD,EAAWC,QAAX,IAAuBd,KAA7B;AACA,2BACKa,QADL,MAEKC,QAFL;AAGEF,IAAAA,OAAO,EAAE;AAAEjB,MAAAA,QAAF;AAAYC,MAAAA;AAAZ;AAHX;AAKD","sourcesContent":["import { hexToAscii } from 'web3-utils'\nimport { getAbi } from '../../interfaces'\nimport { makeProxyFromABI } from '../../utils'\nimport promiseTimeout from '../../utils/promise-timeout'\n\nexport function makeRepoProxy (address, web3, options) {\n  return makeProxyFromABI(address, getAbi('apm/Repo'), web3, options)\n}\n\nexport async function getAllRepoVersions (repoProxy) {\n  const versions = []\n  const versionCount = await repoProxy.call('getVersionsCount')\n\n  // Versions index starts at 1\n  for (let versionId = 1; versionId <= versionCount; ++versionId) {\n    versions.push(await getRepoVersionById(repoProxy, versionId))\n  }\n\n  return Promise.all(versions)\n}\n\nexport async function getRepoLatestVersion (repoProxy) {\n  const { contentURI, contractAddress, semanticVersion } = await repoProxy.call('getLatest')\n  return {\n    contractAddress,\n    contentURI: hexToAscii(contentURI),\n    version: semanticVersion.join('.')\n  }\n}\n\nexport async function getRepoLatestVersionForContract (repoProxy, appContractAddress) {\n  const {\n    contentURI,\n    contractAddress,\n    semanticVersion\n  } = await repoProxy.call('getLatestForContractAddress', appContractAddress)\n\n  return {\n    contractAddress,\n    contentURI: hexToAscii(contentURI),\n    version: semanticVersion.join('.')\n  }\n}\n\nexport async function getRepoVersionById (repoProxy, versionId) {\n  const { contentURI, contractAddress, semanticVersion } = await repoProxy.call('getByVersionId', versionId)\n  return {\n    contractAddress,\n    contentURI: hexToAscii(contentURI),\n    version: semanticVersion.join('.'),\n    // Keeping this as a string makes comparisons a bit easier down the line\n    versionId: versionId.toString()\n  }\n}\n\nexport async function fetchRepoContentURI (fileFetcher, contentURI, { fetchTimeout } = {}) {\n  const [provider, location] = contentURI.split(/:(.+)/)\n\n  if (!provider || !location) {\n    throw new Error(`contentURI invalid: ${contentURI}`)\n  } else if (!fileFetcher.supportsProvider(provider)) {\n    throw new Error(`Provider not supported: ${provider}`)\n  }\n\n  let files\n  try {\n    let filesFetch = Promise.all([\n      fileFetcher.fetch(provider, location, 'manifest.json'),\n      fileFetcher.fetch(provider, location, 'artifact.json')\n    ])\n    if (Number.isFinite(fetchTimeout) && fetchTimeout > 0) {\n      filesFetch = promiseTimeout(filesFetch, fetchTimeout)\n    }\n    files = (await filesFetch).map(JSON.parse)\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      // JSON parse error\n      console.warn(`Fetch failed: ${contentURI} was not JSON-parsable`, err)\n    }\n\n    // Fetch failed or timed out\n    return {\n      content: { provider, location }\n    }\n  }\n\n  const [manifest, artifact] = files\n  return {\n    ...manifest,\n    ...artifact,\n    content: { provider, location }\n  }\n}\n"],"file":"repo.js"}