{"version":3,"sources":["../../../src/rpc/handlers/get-app-metadata.js"],"names":["request","proxy","wrapper","getAppMetadata","metadataRegistry","Object","values","filter","action","to","includes","address","appMetadata","pipe","appMetadataObject","event","returnValues","metadataEvent","length"],"mappings":";;;;;;;AAAA;;AAEe,kBAAUA,OAAV,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AAChD;AACA,QAAMC,cAAc,GAAGC,gBAAgB,IACrCC,MAAM,CAACC,MAAP,CAAcF,gBAAd,EACGG,MADH,CACUC,MAAM,IAAIA,MAAM,CAACC,EAAP,CAAUC,QAAV,CAAmB,GAAnB,KAA2BF,MAAM,CAACC,EAAP,CAAUC,QAAV,CAAmBT,KAAK,CAACU,OAAzB,CAD/C,CADF;;AAKA,SAAOT,OAAO,CAACU,WAAR,CAAoBC,IAApB,EACL;AACA;AACA,sBAAIC,iBAAiB,KAAK;AACxBC,IAAAA,KAAK,EAAE,aADiB;AAExBC,IAAAA,YAAY,EAAEb,cAAc,CAACW,iBAAD;AAFJ,GAAL,CAArB,CAHK,EAOL;AACA,yBAAOG,aAAa,IAAIA,aAAa,CAACD,YAAd,CAA2BE,MAA3B,GAAoC,CAA5D,CARK,CAAP;AAUD","sourcesContent":["import { map, filter } from 'rxjs/operators'\n\nexport default function (request, proxy, wrapper) {\n  // filter out data items not meant to be viewable by the caller\n  const getAppMetadata = metadataRegistry => (\n    Object.values(metadataRegistry)\n      .filter(action => action.to.includes('*') || action.to.includes(proxy.address))\n  )\n\n  return wrapper.appMetadata.pipe(\n    // transform the observable into an event-like object\n    // that only contains data for selected target applications\n    map(appMetadataObject => ({\n      event: 'AppMetadata',\n      returnValues: getAppMetadata(appMetadataObject)\n    })),\n    // only emit observables that contain data\n    filter(metadataEvent => metadataEvent.returnValues.length > 0)\n  )\n}\n"],"file":"get-app-metadata.js"}