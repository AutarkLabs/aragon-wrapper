{"version":3,"sources":["../../../src/rpc/handlers/get-app-metadata.test.js"],"names":["t","plan","getAppMetadataObservable","from","to","dataId","cid","mockProxy","address","mockWrapper","appMetadata","subscribe","value","deepEqual","event","returnValues"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEA,kBAAK,qDAAL,EAA4D,MAAOA,CAAP,IAAa;AACvEA,EAAAA,CAAC,CAACC,IAAF,CAAO,CAAP;AAEA,QAAMC,wBAAwB,GAAG,gBAAK,CACpC;AAAE,SAAK;AACLC,MAAAA,IAAI,EAAE,OADD;AAELC,MAAAA,EAAE,EAAE,CAAE,YAAF,CAFC;AAGLC,MAAAA,MAAM,EAAE,IAHH;AAILC,MAAAA,GAAG,EAAE;AAJA,KAAP;AAMA,SAAK;AACHH,MAAAA,IAAI,EAAE,OADH;AAEHC,MAAAA,EAAE,EAAE,CAAE,QAAF,EAAY,YAAZ,CAFD;AAGHC,MAAAA,MAAM,EAAE,IAHL;AAIHC,MAAAA,GAAG,EAAE;AAJF,KANL;AAYA,SAAK;AACHH,MAAAA,IAAI,EAAE,QADH;AAEHC,MAAAA,EAAE,EAAE,CAAC,GAAD,CAFD;AAGHC,MAAAA,MAAM,EAAE,KAHL;AAIHC,MAAAA,GAAG,EAAE;AAJF;AAZL,GADoC,CAAL,CAAjC;AAqBA,QAAMC,SAAS,GAAG;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAlB;AACA,QAAMC,WAAW,GAAG;AAAEC,IAAAA,WAAW,EAAER;AAAf,GAApB;AAEA,+BAAe,IAAf,EAAqBK,SAArB,EAAgCE,WAAhC,EAA6CE,SAA7C,CAAuDC,KAAK,IAAI;AAC9DZ,IAAAA,CAAC,CAACa,SAAF,CAAYD,KAAZ,EAAmB;AACjBE,MAAAA,KAAK,EAAE,aADU;AAEjBC,MAAAA,YAAY,EAAE,CAAC;AACbZ,QAAAA,IAAI,EAAE,OADO;AAEbC,QAAAA,EAAE,EAAE,CAAE,QAAF,EAAY,YAAZ,CAFS;AAGbC,QAAAA,MAAM,EAAE,IAHK;AAIbC,QAAAA,GAAG,EAAE;AAJQ,OAAD,EAMd;AACEH,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,EAAE,EAAE,CAAC,GAAD,CAFN;AAGEC,QAAAA,MAAM,EAAE,KAHV;AAIEC,QAAAA,GAAG,EAAE;AAJP,OANc;AAFG,KAAnB;AAeD,GAhBD;AAiBD,CA5CD","sourcesContent":["import test from 'ava'\nimport getAppMetadata from './get-app-metadata'\nimport { from } from 'rxjs'\n\ntest('should receive and filter the app metadata registry', async (t) => {\n  t.plan(1)\n\n  const getAppMetadataObservable = from([\n    { 'a': {\n      from: '0x73a',\n      to: [ '0xdeadcafe' ],\n      dataId: 'u1',\n      cid: 'Qmrandomhash'\n    },\n    'b': {\n      from: '0xfed',\n      to: [ '0xcafe', '0xdeaddead' ],\n      dataId: 'u2',\n      cid: 'Qmrandomhash'\n    },\n    'c': {\n      from: '0xfed1',\n      to: ['*'],\n      dataId: 'u32',\n      cid: 'Qmrandomhash2'\n    } }\n  ])\n\n  const mockProxy = { address: '0xdeaddead' }\n  const mockWrapper = { appMetadata: getAppMetadataObservable }\n\n  getAppMetadata(null, mockProxy, mockWrapper).subscribe(value => {\n    t.deepEqual(value, {\n      event: 'AppMetadata',\n      returnValues: [{\n        from: '0xfed',\n        to: [ '0xcafe', '0xdeaddead' ],\n        dataId: 'u2',\n        cid: 'Qmrandomhash'\n      },\n      {\n        from: '0xfed1',\n        to: ['*'],\n        dataId: 'u32',\n        cid: 'Qmrandomhash2'\n      }]\n    })\n  })\n})\n"],"file":"get-app-metadata.test.js"}