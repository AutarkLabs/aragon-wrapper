{"version":3,"sources":["../../../src/rpc/handlers/get-forwarded-actions.test.js"],"names":["t","plan","mockProxy","address","forwardedActionsObservable","pending","currentApp","actionId","target","evmScript","state","mockWrapper","forwardedActions","subscribe","value","deepEqual","event","returnValues"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport getForwardedActions from './get-forwarded-actions'\nimport { from } from 'rxjs'\n\ntest('should receive and filter the forwardedActions registry', async (t) => {\n  t.plan(2)\n\n  const mockProxy = { address: '0xdeaddead' }\n  const forwardedActionsObservable = from([\n    {\n      [mockProxy.address]: {\n        pending: [{ // first value\n          currentApp: '0xbeefbeef',\n          actionId: '1',\n          target: '0xdeaddead',\n          evmScript: '0x00000001abc',\n          state: 0\n        },\n        {\n          currentApp: '0xfed',\n          actionId: '1',\n          target: '0xdeaddead',\n          evmScript: '0x00000001xyz',\n          state: 2\n        }]\n      }\n    },\n    {\n      '0xbeefdead': { pending: [{ // should filter out this entry\n        currentApp: '0xbeefbeef',\n        actionId: '1',\n        target: '0xbeefdead',\n        evmScript: '0x00000001abc',\n        state: 0\n      }]\n      },\n      [mockProxy.address]: { pending: [{ // second value\n        currentApp: '0xbeefbeef',\n        actionId: '1',\n        target: '0xdeaddead',\n        evmScript: '0x00000001abc',\n        state: 0\n      },\n      {\n        currentApp: '0xfed',\n        actionId: '1',\n        target: '0xdeaddead',\n        evmScript: '0x00000001xyz',\n        state: 2\n      }] }\n    },\n    {\n      '0xbeefdead': { pending: [{ // should not emit an observable for this value\n        currentApp: '0xbeefbeef',\n        actionId: '1',\n        target: '0xbeefdead', // target address mismatch\n        evmScript: '0x00000001abc',\n        state: 0\n      },\n      { // missing a target address\n        currentApp: '0xbeefbeef',\n        actionId: '2',\n        evmScript: '0x00000001abc',\n        state: 0\n      }]\n      }\n    }\n\n  ])\n\n  const mockWrapper = { forwardedActions: forwardedActionsObservable }\n\n  getForwardedActions(null, mockProxy, mockWrapper).subscribe(value => {\n    t.deepEqual(value, {\n      event: 'ForwardedActions',\n      returnValues: {\n        pending: [{\n          currentApp: '0xbeefbeef',\n          actionId: '1',\n          target: '0xdeaddead',\n          evmScript: '0x00000001abc',\n          state: 0\n        },\n        {\n          currentApp: '0xfed',\n          actionId: '1',\n          target: '0xdeaddead',\n          evmScript: '0x00000001xyz',\n          state: 2\n        }]\n      }\n    })\n  })\n})\n"],"file":"get-forwarded-actions.test.js"}