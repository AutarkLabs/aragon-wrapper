{"version":3,"sources":["../../../src/rpc/handlers/query-app-metadata.test.js"],"names":["t","plan","queryAppMetadataObservable","from","to","dataId","cid","mockRequest","params","mockWrapper","appMetadata","subscribe","value","deepEqual","mockInvalidRequest","is","undefined"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEA,kBAAK,qDAAL,EAA4D,MAAOA,CAAP,IAAa;AACvEA,EAAAA,CAAC,CAACC,IAAF,CAAO,CAAP,EADuE,CAEvE;AACA;;AACA,QAAMC,0BAA0B,GAAG,cACjC;AAAE,WAAO;AACPC,MAAAA,IAAI,EAAE,OADC;AAEPC,MAAAA,EAAE,EAAE,CAAE,YAAF,CAFG;AAGPC,MAAAA,MAAM,EAAE,IAHD;AAIPC,MAAAA,GAAG,EAAE;AAJE,KAAT;AAMA,WAAO;AACLH,MAAAA,IAAI,EAAE,OADD;AAELC,MAAAA,EAAE,EAAE,CAAE,QAAF,EAAY,YAAZ,CAFC;AAGLC,MAAAA,MAAM,EAAE,IAHH;AAILC,MAAAA,GAAG,EAAE;AAJA,KANP;AAYA,WAAO;AACLH,MAAAA,IAAI,EAAE,QADD;AAELC,MAAAA,EAAE,EAAE,CAAC,GAAD,CAFC;AAGLC,MAAAA,MAAM,EAAE,KAHH;AAILC,MAAAA,GAAG,EAAE;AAJA;AAZP,GADiC,CAAnC;AAqBA,QAAMC,WAAW,GAAG;AAAEC,IAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN;AAAV,GAApB;AACA,QAAMC,WAAW,GAAG;AAAEC,IAAAA,WAAW,EAAER;AAAf,GAApB,CA1BuE,CA2BvE;;AACA,iCAAiBK,WAAjB,EAA8B,IAA9B,EAAoCE,WAApC,EAAiDE,SAAjD,CAA2DC,KAAK,IAAI;AAClE;AACAZ,IAAAA,CAAC,CAACa,SAAF,CAAYD,KAAZ,EAAmB;AACjBT,MAAAA,IAAI,EAAE,OADW;AAEjBC,MAAAA,EAAE,EAAE,CAAE,QAAF,EAAY,YAAZ,CAFa;AAGjBC,MAAAA,MAAM,EAAE,IAHS;AAIjBC,MAAAA,GAAG,EAAE;AAJY,KAAnB;AAMD,GARD,EA5BuE,CAsCvE;AACA;;AACA,QAAMQ,kBAAkB,GAAG;AAAEN,IAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN;AAAV,GAA3B,CAxCuE,CAyCvE;;AACA,iCAAiBM,kBAAjB,EAAqC,IAArC,EAA2CL,WAA3C,EAAwDE,SAAxD,CAAkEC,KAAK,IAAI;AACzE;AACAZ,IAAAA,CAAC,CAACe,EAAF,CAAKH,KAAL,EAAYI,SAAZ,EAAuB,mDAAvB;AACD,GAHD;AAID,CA9CD","sourcesContent":["import test from 'ava'\nimport queryAppMetadata from './query-app-metadata'\nimport { of } from 'rxjs'\n\ntest('should receive and filter the app metadata registry', async (t) => {\n  t.plan(2)\n  /// should return the specific action requested\n  // arrange\n  const queryAppMetadataObservable = of(\n    { 'a,1': {\n      from: '0x73a',\n      to: [ '0xdeadcafe' ],\n      dataId: 'u1',\n      cid: 'Qmrandomhash'\n    },\n    'a,2': {\n      from: '0xfed',\n      to: [ '0xcafe', '0xdeaddead' ],\n      dataId: 'u2',\n      cid: 'Qmrandomhash'\n    },\n    'b,1': {\n      from: '0xfed1',\n      to: ['*'],\n      dataId: 'u32',\n      cid: 'Qmrandomhash2'\n    } }\n  )\n\n  const mockRequest = { params: ['a', '2'] }\n  const mockWrapper = { appMetadata: queryAppMetadataObservable }\n  // act\n  queryAppMetadata(mockRequest, null, mockWrapper).subscribe(value => {\n    // assert\n    t.deepEqual(value, {\n      from: '0xfed',\n      to: [ '0xcafe', '0xdeaddead' ],\n      dataId: 'u2',\n      cid: 'Qmrandomhash'\n    })\n  })\n\n  /// should return undefined for invalid queries\n  // arrange\n  const mockInvalidRequest = { params: ['a', '3'] }\n  // act\n  queryAppMetadata(mockInvalidRequest, null, mockWrapper).subscribe(value => {\n    // assert\n    t.is(value, undefined, 'query for an absent entry should return undefined')\n  })\n})\n"],"file":"query-app-metadata.test.js"}